{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Charan\\\\Downloads\\\\demo\\\\demo\\\\my-react-app\\\\src\\\\components\\\\MapPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { GoogleMap, Marker, InfoWindow, useJsApiLoader } from \"@react-google-maps/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst animalLocations = [{\n  name: \"Bengal Tiger\",\n  coordinates: {\n    lat: 21.2945,\n    lng: 79.4082\n  }\n}, {\n  name: \"Asian Elephant\",\n  coordinates: {\n    lat: 11.586,\n    lng: 77.8809\n  }\n}, {\n  name: \"Indian Rhino\",\n  coordinates: {\n    lat: 26.095,\n    lng: 93.3656\n  }\n}\n// Add more animal locations here\n];\nconst containerStyle = {\n  width: \"100vw\",\n  height: \"100vh\"\n};\nconst center = {\n  lat: 20.5937,\n  // Center of India\n  lng: 78.9629\n};\nconst App = () => {\n  _s();\n  const {\n    isLoaded\n  } = useJsApiLoader({\n    googleMapsApiKey: \"AIzaSyDxQvBDqOWE0wLyB8Ml4T0ii3Z9b49CttY\" // Replace with your actual API key\n  });\n  const [selectedAnimal, setSelectedAnimal] = useState(null);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [mapCenter, setMapCenter] = useState(center);\n  const handleSearch = () => {\n    const foundAnimal = animalLocations.find(animal => animal.name.toLowerCase() === searchQuery.toLowerCase());\n    if (foundAnimal) {\n      setMapCenter(foundAnimal.coordinates);\n      setSelectedAnimal(foundAnimal);\n    } else {\n      alert(\"Animal not found. Try a different name.\");\n    }\n  };\n  if (!isLoaded) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Search for an animal...\",\n        value: searchQuery,\n        onChange: e => setSearchQuery(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSearch,\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(GoogleMap, {\n      mapContainerStyle: containerStyle,\n      center: mapCenter,\n      zoom: 6,\n      children: [animalLocations.map((animal, index) => /*#__PURE__*/_jsxDEV(Marker, {\n        position: animal.coordinates,\n        onClick: () => setSelectedAnimal(animal)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 21\n      }, this)), selectedAnimal && /*#__PURE__*/_jsxDEV(InfoWindow, {\n        position: selectedAnimal.coordinates,\n        onCloseClick: () => setSelectedAnimal(null),\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: selectedAnimal.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Coordinates: \", selectedAnimal.coordinates.lat, \", \", selectedAnimal.coordinates.lng]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"HyZwN4tVyEEinqfhOMiUVH52tA8=\", false, function () {\n  return [useJsApiLoader];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","GoogleMap","Marker","InfoWindow","useJsApiLoader","jsxDEV","_jsxDEV","animalLocations","name","coordinates","lat","lng","containerStyle","width","height","center","App","_s","isLoaded","googleMapsApiKey","selectedAnimal","setSelectedAnimal","searchQuery","setSearchQuery","mapCenter","setMapCenter","handleSearch","foundAnimal","find","animal","toLowerCase","alert","children","fileName","_jsxFileName","lineNumber","columnNumber","className","type","placeholder","value","onChange","e","target","onClick","mapContainerStyle","zoom","map","index","position","onCloseClick","_c","$RefreshReg$"],"sources":["C:/Users/Charan/Downloads/demo/demo/my-react-app/src/components/MapPage.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { GoogleMap, Marker, InfoWindow, useJsApiLoader } from \"@react-google-maps/api\";\r\n\r\nconst animalLocations = [\r\n    { name: \"Bengal Tiger\", coordinates: { lat: 21.2945, lng: 79.4082 } },\r\n    { name: \"Asian Elephant\", coordinates: { lat: 11.586, lng: 77.8809 } },\r\n    { name: \"Indian Rhino\", coordinates: { lat: 26.095, lng: 93.3656 } },\r\n    // Add more animal locations here\r\n];\r\n\r\nconst containerStyle = {\r\n    width: \"100vw\",\r\n    height: \"100vh\",\r\n};\r\n\r\nconst center = {\r\n    lat: 20.5937, // Center of India\r\n    lng: 78.9629,\r\n};\r\n\r\nconst App = () => {\r\n    const { isLoaded } = useJsApiLoader({\r\n        googleMapsApiKey: \"AIzaSyDxQvBDqOWE0wLyB8Ml4T0ii3Z9b49CttY\", // Replace with your actual API key\r\n    });\r\n\r\n    const [selectedAnimal, setSelectedAnimal] = useState(null);\r\n    const [searchQuery, setSearchQuery] = useState(\"\");\r\n    const [mapCenter, setMapCenter] = useState(center);\r\n\r\n    const handleSearch = () => {\r\n        const foundAnimal = animalLocations.find(\r\n            (animal) => animal.name.toLowerCase() === searchQuery.toLowerCase()\r\n        );\r\n\r\n        if (foundAnimal) {\r\n            setMapCenter(foundAnimal.coordinates);\r\n            setSelectedAnimal(foundAnimal);\r\n        } else {\r\n            alert(\"Animal not found. Try a different name.\");\r\n        }\r\n    };\r\n\r\n    if (!isLoaded) {\r\n        return <div>Loading...</div>;\r\n    }\r\n\r\n    return (\r\n        <div className=\"app\">\r\n            <div className=\"search-box\">\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Search for an animal...\"\r\n                    value={searchQuery}\r\n                    onChange={(e) => setSearchQuery(e.target.value)}\r\n                />\r\n                <button onClick={handleSearch}>Search</button>\r\n            </div>\r\n            <GoogleMap mapContainerStyle={containerStyle} center={mapCenter} zoom={6}>\r\n                {animalLocations.map((animal, index) => (\r\n                    <Marker\r\n                        key={index}\r\n                        position={animal.coordinates}\r\n                        onClick={() => setSelectedAnimal(animal)}\r\n                    />\r\n                ))}\r\n                {selectedAnimal && (\r\n                    <InfoWindow\r\n                        position={selectedAnimal.coordinates}\r\n                        onCloseClick={() => setSelectedAnimal(null)}\r\n                    >\r\n                        <div>\r\n                            <h2>{selectedAnimal.name}</h2>\r\n                            <p>Coordinates: {selectedAnimal.coordinates.lat}, {selectedAnimal.coordinates.lng}</p>\r\n                        </div>\r\n                    </InfoWindow>\r\n                )}\r\n            </GoogleMap>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,SAAS,EAAEC,MAAM,EAAEC,UAAU,EAAEC,cAAc,QAAQ,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvF,MAAMC,eAAe,GAAG,CACpB;EAAEC,IAAI,EAAE,cAAc;EAAEC,WAAW,EAAE;IAAEC,GAAG,EAAE,OAAO;IAAEC,GAAG,EAAE;EAAQ;AAAE,CAAC,EACrE;EAAEH,IAAI,EAAE,gBAAgB;EAAEC,WAAW,EAAE;IAAEC,GAAG,EAAE,MAAM;IAAEC,GAAG,EAAE;EAAQ;AAAE,CAAC,EACtE;EAAEH,IAAI,EAAE,cAAc;EAAEC,WAAW,EAAE;IAAEC,GAAG,EAAE,MAAM;IAAEC,GAAG,EAAE;EAAQ;AAAE;AACnE;AAAA,CACH;AAED,MAAMC,cAAc,GAAG;EACnBC,KAAK,EAAE,OAAO;EACdC,MAAM,EAAE;AACZ,CAAC;AAED,MAAMC,MAAM,GAAG;EACXL,GAAG,EAAE,OAAO;EAAE;EACdC,GAAG,EAAE;AACT,CAAC;AAED,MAAMK,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACd,MAAM;IAAEC;EAAS,CAAC,GAAGd,cAAc,CAAC;IAChCe,gBAAgB,EAAE,yCAAyC,CAAE;EACjE,CAAC,CAAC;EAEF,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGrB,QAAQ,CAAC,IAAI,CAAC;EAC1D,MAAM,CAACsB,WAAW,EAAEC,cAAc,CAAC,GAAGvB,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACwB,SAAS,EAAEC,YAAY,CAAC,GAAGzB,QAAQ,CAACe,MAAM,CAAC;EAElD,MAAMW,YAAY,GAAGA,CAAA,KAAM;IACvB,MAAMC,WAAW,GAAGpB,eAAe,CAACqB,IAAI,CACnCC,MAAM,IAAKA,MAAM,CAACrB,IAAI,CAACsB,WAAW,CAAC,CAAC,KAAKR,WAAW,CAACQ,WAAW,CAAC,CACtE,CAAC;IAED,IAAIH,WAAW,EAAE;MACbF,YAAY,CAACE,WAAW,CAAClB,WAAW,CAAC;MACrCY,iBAAiB,CAACM,WAAW,CAAC;IAClC,CAAC,MAAM;MACHI,KAAK,CAAC,yCAAyC,CAAC;IACpD;EACJ,CAAC;EAED,IAAI,CAACb,QAAQ,EAAE;IACX,oBAAOZ,OAAA;MAAA0B,QAAA,EAAK;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAChC;EAEA,oBACI9B,OAAA;IAAK+B,SAAS,EAAC,KAAK;IAAAL,QAAA,gBAChB1B,OAAA;MAAK+B,SAAS,EAAC,YAAY;MAAAL,QAAA,gBACvB1B,OAAA;QACIgC,IAAI,EAAC,MAAM;QACXC,WAAW,EAAC,yBAAyB;QACrCC,KAAK,EAAElB,WAAY;QACnBmB,QAAQ,EAAGC,CAAC,IAAKnB,cAAc,CAACmB,CAAC,CAACC,MAAM,CAACH,KAAK;MAAE;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnD,CAAC,eACF9B,OAAA;QAAQsC,OAAO,EAAElB,YAAa;QAAAM,QAAA,EAAC;MAAM;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7C,CAAC,eACN9B,OAAA,CAACL,SAAS;MAAC4C,iBAAiB,EAAEjC,cAAe;MAACG,MAAM,EAAES,SAAU;MAACsB,IAAI,EAAE,CAAE;MAAAd,QAAA,GACpEzB,eAAe,CAACwC,GAAG,CAAC,CAAClB,MAAM,EAAEmB,KAAK,kBAC/B1C,OAAA,CAACJ,MAAM;QAEH+C,QAAQ,EAAEpB,MAAM,CAACpB,WAAY;QAC7BmC,OAAO,EAAEA,CAAA,KAAMvB,iBAAiB,CAACQ,MAAM;MAAE,GAFpCmB,KAAK;QAAAf,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAGb,CACJ,CAAC,EACDhB,cAAc,iBACXd,OAAA,CAACH,UAAU;QACP8C,QAAQ,EAAE7B,cAAc,CAACX,WAAY;QACrCyC,YAAY,EAAEA,CAAA,KAAM7B,iBAAiB,CAAC,IAAI,CAAE;QAAAW,QAAA,eAE5C1B,OAAA;UAAA0B,QAAA,gBACI1B,OAAA;YAAA0B,QAAA,EAAKZ,cAAc,CAACZ;UAAI;YAAAyB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eAC9B9B,OAAA;YAAA0B,QAAA,GAAG,eAAa,EAACZ,cAAc,CAACX,WAAW,CAACC,GAAG,EAAC,IAAE,EAACU,cAAc,CAACX,WAAW,CAACE,GAAG;UAAA;YAAAsB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACrF;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CACf;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACX,CAAC;AAEd,CAAC;AAACnB,EAAA,CA3DID,GAAG;EAAA,QACgBZ,cAAc;AAAA;AAAA+C,EAAA,GADjCnC,GAAG;AA6DT,eAAeA,GAAG;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}